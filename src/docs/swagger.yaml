openapi: 3.0.0
info:
  title: Majitrack - Community Water Monitoring System API
  description: API documentation for reporting, resolving, and notifying water-related issues in rural areas.
  version: 1.0.0

servers:
  - url: http://localhost:5000/api
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        phone_number:
          type: string
        role:
          type: string
          enum: [resident, admin]

    Report:
      type: object
      properties:
        report_id:
          type: integer
        user_id:
          type: integer
        water_source_id:
          type: integer
        description:
          type: string
        status:
          type: string
          enum: [pending, resolved]
        date_created:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        notification_id:
          type: integer
        user_id:
          type: integer
        report_id:
          type: integer
        message:
          type: string
        status:
          type: string
        date_received:
          type: string
          format: date-time

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      summary: Login with phone number
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
      responses:
        '200':
          description: JWT token returned
        '404':
          description: User not found

  /users:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /reports:
    post:
      summary: Submit a report (Resident only)
      tags: [Reports]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                waterSourceId:
                  type: integer
                description:
                  type: string
      responses:
        '201':
          description: Report submitted

    get:
      summary: Get all reports
      tags: [Reports]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of reports

  /reports/user/{userId}:
    get:
      summary: Get reports submitted by a specific user
      tags: [Reports]
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of user reports

  /admin/respond/{reportId}:
    post:
      summary: Admin responds to a report
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                adminUserId:
                  type: integer
                comments:
                  type: string
      responses:
        '200':
          description: Report resolved

  /notifications:
    post:
      summary: Send notification (Admin only)
      tags: [Notifications]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                reportId:
                  type: integer
                message:
                  type: string
      responses:
        '201':
          description: Notification sent

  /notifications/user/{userId}:
    get:
      summary: Get notifications for a user
      tags: [Notifications]
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of notifications
